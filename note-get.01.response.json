{
  "Note": {
    "ID": "112900468643",
    "Name": "Mastodon",
    "Class": "shell",
    "Scope": "shared",
    "Content": "#!/bin/bash\n#\n# @sacloud-once\n# @sacloud-desc-begin\n# このスクリプトはmastodonをセットアップします。\n# (このスクリプトは、CentOS7.Xでのみ動作します。)\n#\n# 事前作業として以下の2つが必要となります\n# ・さくらのクラウドDNSにゾーン登録を完了していること\n# ・さくらのクラウドAPIのアクセストークンを取得していること\n# ブラウザからアクセスできるようになるまでに30分程度のお時間がかかります。\n# https://(さくらのクラウドDNSのゾーン名)\n# @sacloud-desc-end\n#\n# @sacloud-require-archive distro-centos distro-ver-7\n#\n# @sacloud-text required ZONE \"さくらのクラウドDNSで管理しているDNSゾーン\" ex=\"example.com\"\n# @sacloud-password required TOKEN \"APIキーの ACCESS TOKEN\"\n# @sacloud-password required SECRET \"APIキーの ACCESS TOKEN SECRET\"\n\nTOKEN=\"@@@TOKEN@@@\"\nSECRET=\"@@@SECRET@@@\"\n\nset -x\nsource /etc/sysconfig/network-scripts/ifcfg-eth0\nDOMAIN=\"@@@ZONE@@@\"\nMADDR=mastodon@${DOMAIN}\n\n# TOKEN,SECRET が記述されているスクリプトを削除\nfind ./ -maxdepth 1 -perm -u=x -type f -exec rm -r {} \\;\n\n# ログのシンボリックリンクを作成\nln -s $(find /root/.sacloud-api/notes/*log) /tmp/startup_script.log\n\n# epelリポジトリの有効化\nyum install -y yum-utils\nyum-config-manager --enable epel\n\n# 追加リポジトリ\nyum install -y http://li.nux.ro/download/nux/dextop/el7/x86_64/nux-dextop-release-0-5.el7.nux.noarch.rpm\ncurl -sL https://rpm.nodesource.com/setup_6.x | bash -\n\n# パッケージのアップデートとインストール\nyum update -y\nyum install -y ImageMagick ffmpeg redis postgresql-{server,devel} authd nodejs {openssl,readline,zlib}-devel nginx jq bind-utils\nnpm install -g yarn\n\n# DNS 登録\nif [ $(dig ${DOMAIN} ns +short | egrep -c '^ns[0-9]+.gslb[0-9]+.sakura.ne.jp.$') -ne 2 ]\nthen\n  echo \"お客様ドメインのNSレコードにさくらのクラウドDNSが設定されておりません\"\n  exit 1\nfi\n\nBASEURL=https://secure.sakura.ad.jp/cloud/zone/tk1a/api/cloud/1.1/commonserviceitem/\nRESJSON=resource.json\nADDJSON=add.json\nset +x\ncurl -s --user \"${TOKEN}:${SECRET}\" ${BASEURL} | jq -r \".CommonServiceItems[] | select(.Status.Zone == \\\"${DOMAIN}\\\")\" > ${RESJSON} 2>/dev/null\nset -x\nRESID=$(jq -r .ID ${RESJSON})\nBLANKCHK=$(jq -r \".Settings.DNS.ResourceRecordSets\" ${RESJSON})\nif [ $(echo \"${BLANKCHK}\" | grep -c \"^\\[\\]$\") -ne 1 ]\nthen\n  if [ \"${BLANKCHK}x\" = \"x\" ]\n  then\n    echo \"リソースIDが取得できません、入力したAPIキーとドメイン名を確認してください\"\n    exit 1\n  else\n    echo \"レコードが登録されていないドメインを指定してください\"\n    exit 1\n  fi\nfi\n\nAPIURL=${BASEURL}${RESID}\ncat <<_EOL_> ${ADDJSON}\n{\n \"CommonServiceItem\": {\n  \"Settings\": {\n   \"DNS\":  {\n    \"ResourceRecordSets\": [\n     {\n      \"Name\": \"@\",\n      \"Type\": \"A\",\n      \"TTL\": \"600\",\n      \"RData\": \"${IPADDR}\"\n     },\n     {\n      \"Name\": \"@\",\n      \"Type\": \"MX\",\n      \"TTL\": \"600\",\n      \"RData\": \"10 ${DOMAIN}.\"\n     },\n     {\n      \"Name\": \"@\",\n      \"Type\": \"TXT\",\n      \"TTL\": \"600\",\n      \"RData\": \"v=spf1 +ip4:${IPADDR} -all\"\n     }\n    ]\n   }\n  }\n }\n}\n_EOL_\n\nset +x\ncurl -s --user \"${TOKEN}:${SECRET}\" -X PUT -d \"$(cat ${ADDJSON} | jq -c .)\" ${APIURL} | jq \".\"\nset -x\n\n# postgresql, redis\nexport PGSETUP_INITDB_OPTIONS=\"--encoding=UTF-8 --no-locale\"\npostgresql-setup initdb\nsed -i \"s/ident/trust/\" /var/lib/pgsql/data/pg_hba.conf\nsystemctl enable postgresql redis\nsystemctl start postgresql redis\nsu - postgres -c \"createuser --createdb mastodon\"\n\n# ruby, mastodon\nuseradd mastodon\nSETUP=/home/mastodon/setup.sh\ncat << _EOF_ > ${SETUP}\ngit clone https://github.com/sstephenson/rbenv.git ~/.rbenv\necho 'export PATH=\"~/.rbenv/bin:$PATH\"' >> ~/.bash_profile\nsource ~/.bash_profile\nrbenv init - >> ~/.bash_profile\nsource ~/.bash_profile\ngit clone https://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build\nrbenv install 2.4.1\nrbenv global 2.4.1\nrbenv rehash\n\ngit clone https://github.com/tootsuite/mastodon.git live\ncd live\ngit checkout \\$(git tag | tail -n 1)\ngem install bundler\nbundle install --deployment --without development test\nyarn install\n\ncp .env.production.sample .env.production\nsed -i \"s/_HOST=[rd].*/_HOST=localhost/\" .env.production\nsed -i \"s/=postgres$/=mastodon/\" .env.production\nsed -i \"s/^LOCAL_DOMAIN=.*/LOCAL_DOMAIN=${DOMAIN}/\" .env.production\nsed -i \"s/^LOCAL_HTTPS.*/LOCAL_HTTPS=true/\" .env.production\nsed -i \"s/^SMTP_SERVER.*/SMTP_SERVER=localhost/\" .env.production\nsed -i \"s/^SMTP_PORT=587/SMTP_PORT=25/\" .env.production\nsed -i \"s/^SMTP_LOGIN/#SMTP_LOGIN/\" .env.production\nsed -i \"s/^SMTP_PASSWORD/#SMTP_PASSWORD/\" .env.production\nsed -i \"s/^#SMTP_AUTH_METHOD.*/SMTP_AUTH_METHOD=none/\" .env.production\nsed -i \"s/^SMTP_FROM_ADDRESS=.*/SMTP_FROM_ADDRESS=${MADDR}/\" .env.production\n\nexport SECRET_KEY_BASE=\\$(bundle exec rake secret)\nsed -i \"s/^SECRET_KEY_BASE=/SECRET_KEY_BASE=\\$(printf \\${SECRET_KEY_BASE})/\" .env.production\n\nRAILS_ENV=production bundle exec rails db:setup\nRAILS_ENV=production bundle exec rails assets:precompile\n_EOF_\n\nchmod 755 ${SETUP}\nchown mastodon. ${SETUP}\nsu - mastodon -c \"/bin/bash ${SETUP}\"\n\nSDIR=/etc/systemd/system\ncat << \"_EOF_\" > ${SDIR}/mastodon-web.service\n[Unit]\nDescription=mastodon-web\nAfter=network.target\n\n[Service]\nType=simple\nUser=mastodon\nWorkingDirectory=/home/mastodon/live\nEnvironment=\"RAILS_ENV=production\"\nEnvironment=\"PORT=3000\"\nExecStart=/home/mastodon/.rbenv/shims/bundle exec puma -C config/puma.rb\nTimeoutSec=15\nRestart=always\n\n[Install]\nWantedBy=multi-user.target\n_EOF_\n\ncat << \"_EOF_\" > ${SDIR}/mastodon-sidekiq.service\n[Unit]\nDescription=mastodon-sidekiq\nAfter=network.target\n\n[Service]\nType=simple\nUser=mastodon\nWorkingDirectory=/home/mastodon/live\nEnvironment=\"RAILS_ENV=production\"\nEnvironment=\"DB_POOL=5\"\nExecStart=/home/mastodon/.rbenv/shims/bundle exec sidekiq -c 5 -q default -q mailers -q pull -q push\nTimeoutSec=15\nRestart=always\n\n[Install]\nWantedBy=multi-user.target\n_EOF_\n\ncat << \"_EOF_\" > ${SDIR}/mastodon-streaming.service\n[Unit]\nDescription=mastodon-streaming\nAfter=network.target\n\n[Service]\nType=simple\nUser=mastodon\nWorkingDirectory=/home/mastodon/live\nEnvironment=\"NODE_ENV=production\"\nEnvironment=\"PORT=4000\"\nExecStart=/usr/bin/npm run start\nTimeoutSec=15\nRestart=always\n\n[Install]\nWantedBy=multi-user.target\n_EOF_\n\nsystemctl enable mastodon-{web,sidekiq,streaming}\nsystemctl start mastodon-{web,sidekiq,streaming}\n\necho \"5 0 * * * mastodon cd /home/mastodon/live && RAILS_ENV=production /home/mastodon/.rbenv/shims/bundle exec rake mastodon:daily > /dev/null\" > /etc/cron.d/mastodon\n\n# nginx\nsed -i 's/user nginx/user mastodon/' /etc/nginx/nginx.conf\nchown -R mastodon. /var/{lib,log}/nginx\nsed -i 's/create 0644 nginx nginx/create 0644 mastodon mastodon/' /etc/logrotate.d/nginx\n\ncat << _EOF_ > /etc/nginx/conf.d/https.conf\nmap \\$http_upgrade \\$connection_upgrade {\n  default upgrade;\n  ''      close;\n}\nserver {\n  listen 443 ssl http2 default_server;\n  server_name ${DOMAIN};\n\n  ssl_protocols TLSv1.2;\n  ssl_ciphers EECDH+AESGCM:EECDH+AES;\n  ssl_ecdh_curve prime256v1;\n  ssl_prefer_server_ciphers on;\n  ssl_session_cache shared:SSL:10m;\n\n  ssl_certificate     /etc/letsencrypt/live/${DOMAIN}/fullchain.pem;\n  ssl_certificate_key /etc/letsencrypt/live/${DOMAIN}/privkey.pem;\n  keepalive_timeout    70;\n  sendfile             on;\n  client_max_body_size 0;\n  root /home/mastodon/live/public;\n  server_tokens off;\n  charset     utf-8;\n\n  gzip on;\n  gzip_disable \"msie6\";\n  gzip_vary on;\n  gzip_proxied any;\n  gzip_comp_level 6;\n  gzip_buffers 16 8k;\n  gzip_http_version 1.1;\n  gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;\n  add_header Strict-Transport-Security \"max-age=31536000\";\n\n  location / {\n    try_files \\$uri @proxy;\n  }\n\n  location @proxy {\n    proxy_set_header Host \\$host;\n    proxy_set_header X-Real-IP \\$remote_addr;\n    proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n    proxy_set_header X-Forwarded-Proto https;\n    proxy_set_header Proxy \"\";\n    proxy_pass_header Server;\n\n    proxy_pass http://127.0.0.1:3000;\n    proxy_buffering off;\n    proxy_redirect off;\n    proxy_http_version 1.1;\n    proxy_set_header Upgrade \\$http_upgrade;\n    proxy_set_header Connection \\$connection_upgrade;\n\n    tcp_nodelay on;\n  }\n\n  location /api/v1/streaming {\n    proxy_set_header Host \\$host;\n    proxy_set_header X-Real-IP \\$remote_addr;\n    proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n    proxy_set_header X-Forwarded-Proto https;\n    proxy_set_header Proxy \"\";\n\n    proxy_pass http://localhost:4000;\n    proxy_buffering off;\n    proxy_redirect off;\n    proxy_http_version 1.1;\n    proxy_set_header Upgrade \\$http_upgrade;\n    proxy_set_header Connection \\$connection_upgrade;\n\n    tcp_nodelay on;\n  }\n\n  error_page 500 501 502 503 504 /500.html;\n}\n_EOF_\n\n# firewall\nfirewall-cmd --permanent --add-port=25/tcp --add-port=443/tcp\nfirewall-cmd --reload\n\n# postfix\ncat <<_EOL_>> /etc/postfix/main.cf\nmyhostname = ${DOMAIN}\nsmtp_tls_CAfile = /etc/pki/tls/certs/ca-bundle.crt\nsmtp_tls_security_level = may\nsmtp_tls_loglevel = 1\nsmtpd_client_connection_count_limit = 10\nsmtpd_client_message_rate_limit = 10\nsmtpd_client_recipient_rate_limit = 10\ndisable_vrfy_command = yes\nsmtpd_discard_ehlo_keywords = dsn, enhancedstatuscodes, etrn\n_EOL_\nsed -i 's/^inet_interfaces.*/inet_interfaces = all/' /etc/postfix/main.cf\nsed -i 's/^inet_protocols = all/inet_protocols = ipv4/' /etc/postfix/main.cf\n\nsystemctl restart postfix\n\n# Lets Encrypt\ncd /usr/local\ngit clone https://github.com/certbot/certbot\nexport PATH=/usr/local/certbot:${PATH}\nCERT=/etc/letsencrypt/live/${DOMAIN}/fullchain.pem\nCA=\"certbot-auto -n certonly --standalone -d ${DOMAIN} -m ${MADDR} --agree-tos\"\n${CA}\nfor x in $(seq 1 5)\ndo\n  if [ ! -f ${CERT} ]\n  then\n    ${CA}\n    sleep 300\n  else\n    continue\n  fi\ndone\n\nif [ ! -f ${CERT} ]\nthen\n  echo \"証明書の取得に失敗しました\"\n  exit 1\nfi\n\necho \"0 5 1 * * root /usr/local/certbot/certbot-auto renew --webroot --webroot-path /home/mastodon/live/public --force-renew && /bin/systemctl reload nginx\" > /etc/cron.d/certbot-auto\n\nsystemctl enable nginx\nsystemctl start nginx\n\necho \"スタートアップスクリプトが正常に完了しました\"\n\nexit 0",
    "Description": " このスクリプトはmastodonをセットアップします。\n (このスクリプトは、CentOS7.Xでのみ動作します。)\n\n 事前作業として以下の2つが必要となります\n ・さくらのクラウドDNSにゾーン登録を完了していること\n ・さくらのクラウドAPIのアクセストークンを取得していること\n ブラウザからアクセスできるようになるまでに30分程度のお時間がかかります。\n https://(さくらのクラウドDNSのゾーン名)",
    "Remark": {
      "Form": [
        {
          "type": "text",
          "name": "ZONE",
          "label": "さくらのクラウドDNSで管理しているDNSゾーン",
          "options": {
            "ex": "example.com",
            "required": true
          }
        },
        {
          "type": "password",
          "name": "TOKEN",
          "label": "APIキーの ACCESS TOKEN",
          "options": {
            "required": true
          }
        },
        {
          "type": "password",
          "name": "SECRET",
          "label": "APIキーの ACCESS TOKEN SECRET",
          "options": {
            "required": true
          }
        }
      ],
      "Require": {
        "Archive": {
          "Tags": [
            [
              "distro-centos",
              "distro-ver-7"
            ]
          ]
        }
      }
    },
    "Availability": "available",
    "CreatedAt": "2017-04-18T10:31:41+09:00",
    "ModifiedAt": "2017-04-18T18:18:57+09:00",
    "Icon": null,
    "Tags": []
  },
  "is_ok": true
}
